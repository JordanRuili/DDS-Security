###############################################################################
###############################################################################
######    Makefile to generate cryptographic material and signed XML    ####### 
######        configuration files for DDS Security applications.        #######
###############################################################################
###############################################################################

-include personal.mk

###############################################################################
# The following variables can be passed to the makefile (or overwritten in
# personal.mk) to control the type of cryptographic material generated
###############################################################################

# Algorithm used to generate peer's private key (values: rsa, dsa, ecdsa)
ALGO_KEY          ?= rsa
# Algorithm used to generate CA's private key (values: rsa, dsa, ecdsa)
ALGO_SIGN         ?= rsa
# Size of generate private keys
KEY_SIZE          ?= 2048
# Name of curve to be used for ecdsa generation
KEY_CURVE         ?= prime256v1
# Basename of governance XML file
XML_GOV           ?= governance
# Basename of permissions XML file
XML_PERM          ?= permissions
# Name of peer identities to generate
PEERS             ?= publisher \
                     subscriber

###############################################################################
# Additional variables used by the makefile. Override for advanced usage.
###############################################################################

# OpenSSL configuration file for CA
CA_CNF            ?= openssl_ca.cnf
# CA's private key
CA_KEY            ?= $(DIR_CA)/ca$(EXT_KEY)
# CA's private key param
CA_KEY_PARAM      ?= $(DIR_CA)/ca$(EXT_KEY_PARAM)
# CA's public certificate
CA_CERT           ?= $(DIR_CA)/ca$(EXT_CERT)
# CA's self-signing certificate request
CA_CSR            ?= $(DIR_CA)/ca$(EXT_CSR)
# CA's serial file
CA_SRL            ?= $(DIR_CA)/serial
# CA's index file
CA_INDEX          ?= $(DIR_CA)/index.txt
# CA's certificate validity
CA_CERT_DAYS      ?= 3650

# Directory where CA is stored
DIR_CA            ?= ca
# Directory where keys and certificates will be stored
DIR_CERTS         ?= ca/certs
# Directory where XML files are stored
DIR_XML           ?= xml

# Extension for certificate files
EXT_CERT          ?= .pem
# Extension for signing request files
EXT_CSR           ?= .csr
# Extensions for private key files
EXT_KEY           ?= _key.pem
# Extension for private key param files
EXT_KEY_PARAM     ?= _key.param
# Extension for plain XML files
EXT_XML_PLAIN     ?= .xml
# Extension for signed XML files
EXT_XML_SIGNED    ?= .p7s

# OpenSSL binary
OPENSSL           ?= openssl


###############################################################################
# Internal variables. Better left alone.
###############################################################################

# Files generated for the CA
CA_MATERIAL       ?= \
    $(CA_INDEX) \
    $(CA_SRL) \
    $(CA_KEY) \
    $(CA_CSR) \
    $(CA_CERT)

# Files generated for peer identities
PEER_MATERIAL     ?= \
	$(foreach peer,$(PEERS),$(DIR_CERTS)/$(peer)$(EXT_KEY)) \
	$(foreach peer,$(PEERS),$(DIR_CERTS)/$(peer)$(EXT_CSR)) \
	$(foreach peer,$(PEERS),$(DIR_CERTS)/$(peer)$(EXT_CERT)) \
    $(foreach peer,$(PEERS),$(DIR_XML)/$(XML_PERM)_$(peer)$(EXT_XML_SIGNED)) \
    $(DIR_XML)/$(XML_GOV)$(EXT_XML_SIGNED)

# List of all files generated by makefile
GENERATED         ?= $(CA_MATERIAL) \
                     $(PEER_MATERIAL)

ifndef DEBUG
NO_OUTPUT         = 2>/dev/null 1>/dev/null
endif

###############################################################################
# Macro: MK_KEY(1:key,2:algo,3:param)
###############################################################################
# Helper macro to generate a private key given one of the supported algorithms
# and an optional parameter file.
#
# Keys are generated using the following openssl commands:
#
#   - RSA:
#
#     ```sh
#     openssl genrsa -out key.pem 2048
#     ```
#
#   - DSA:
#
#     ```sh
#     openssl dsaparam 2048 -out key.param
#     openssl gendsa -out key.pem key.param
#     ```
#
#   - ECDSA:
#
#     ```sh
#     openssl ecparam -name prime256v1 -out key.param
#     openssl genpkey -out key.pem -paramfile key.param
#     ```
#
###############################################################################
define MK_KEY
    if [ "$(2)" = "rsa" ]; then \
        $(OPENSSL) genrsa -out "$(1)" $(KEY_SIZE) $(NO_OUTPUT); \
    elif [ "$(2)" = "dsa" ]; then \
        $(OPENSSL) dsaparam $(KEY_SIZE) -out "$(3)" $(NO_OUTPUT); \
        $(OPENSSL) gendsa -out "$(1)" "$(3)" $(NO_OUTPUT); \
    elif [ "$(2)" = "ecdsa" ]; then \
        $(OPENSSL) ecparam -name $(KEY_CURVE) -out "$(3)" $(NO_OUTPUT); \
        $(OPENSSL) genpkey -out "$(1)" -paramfile "$(3)" $(NO_OUTPUT); \
    fi
endef

###############################################################################
########################### Make target recipes ###############################
###############################################################################

.PHONY: all \
        env \
        generate \
        clean \
        clean-all

.PRECIOUS: $(GENERATED)

###############################################################################
# Default rule: generate all peer material (and CA if needed)
###############################################################################
all: $(DIR_CA) \
     $(DIR_CERTS) \
     $(CA_MATERIAL) \
     $(PEER_MATERIAL)

###############################################################################
# Debug rule: print list of target files
###############################################################################
env:
	@printf "%s\n" "$(GENERATED)"

###############################################################################
# Rule to force regeneration of all files
###############################################################################
generate: clean \
          all

###############################################################################
# Rule to clean all generated files
###############################################################################
clean:
	@rm -rfv $(GENERATED)

###############################################################################
# Rule to delete all generated files and CA directory
###############################################################################
clean-all: clean
	@rm -rfv $(DIR_CA)

###############################################################################
# Rule to generate a peer's certificte signing request
###############################################################################
# A signing request can be created using the "openssl req" command:
#
# ```sh
# openssl req -config openssl_ca.cnf -new -key peer.key -out peer.csr
# ```
#
###############################################################################
$(DIR_CERTS)/%$(EXT_CSR): $(DIR_CERTS)/%$(EXT_KEY)
	$(OPENSSL) req -config "openssl_$*.cnf" \
                   -new -key "$<" -out "$@" $(NO_OUTPUT)

###############################################################################
# Rule to generate a peer's certificate
###############################################################################
# A certificate can be created from a signing request using the "openssl ca"
# command, e.g.:
#
# ```sh
# openssl ca -batch -config openssl_ca.cnf -in peer.csr -out peer.pem
# ```
#
###############################################################################
$(DIR_CERTS)/%$(EXT_CERT): $(DIR_CERTS)/%$(EXT_CSR)
	$(OPENSSL) ca -batch -config "$(CA_CNF)" \
                  -in "$<" -out "$@" $(NO_OUTPUT)


###############################################################################
# Rule to genereate a peer's private key
###############################################################################
$(DIR_CERTS)/%$(EXT_KEY):
	$(call MK_KEY,$@,$(ALGO_KEY),$(DIR_CERTS)/$*$(EXT_KEY_PARAM))

###############################################################################
# Rule to sign an XML file
###############################################################################
# An S/MIME document can be generated from a plain text one using a pair of
# (private key,public certificate) using the "openssl cms" command:
#
# ```sh
#   openssl cms -in     plain.xml    \
#               -out    signed.p7s   \
#               -signer ca.pem       \
#               -inkey  ca_key.pem   \
#               -sign                \
#               -outform smime
# ```
# 
###############################################################################
%$(EXT_XML_SIGNED): %$(EXT_XML_PLAIN) \
                    $(CA_CERT)
	$(OPENSSL) cms -in "$*$(EXT_XML_PLAIN)" \
                   -sign \
                   -signer $(CA_CERT) \
                   -inkey  $(CA_KEY) \
                   -outform smime \
                   -out "$@" $(NO_OUTPUT)

###############################################################################
# Rule to generate the CA
###############################################################################
$(CA_CERT): $(CA_CSR)
	$(OPENSSL) x509 -req -days $(CA_CERT_DAYS) \
                    -in $(CA_CSR) -signkey $(CA_KEY) \
                    -out $(CA_CERT) $(NO_OUTPUT)

###############################################################################
# Rule to generate the CA's signing request
###############################################################################
$(CA_CSR): $(CA_KEY)
	$(OPENSSL) req -new -key $(CA_KEY) -out $(CA_CSR) -config $(CA_CNF) $(NO_OUTPUT)

###############################################################################
# Rule to generate a CA's private key
###############################################################################
$(CA_KEY):
	$(call MK_KEY,$(CA_KEY),$(ALGO_SIGN),$(CA_KEY_PARAM))

###############################################################################
# Rule to generate a CA's serial file
###############################################################################
$(CA_SRL):
	echo 01 > $(CA_SRL)

###############################################################################
# Rule to generate CA's index files 
###############################################################################
$(CA_INDEX):
	touch $(CA_INDEX)

###############################################################################
# Rule to generate CA's directory
###############################################################################
$(DIR_CA) \
$(DIR_CERTS):
	mkdir -p $@
